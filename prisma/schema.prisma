datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id() @default(cuid())

  // User Info
  name                     String?
  email                    String       @unique()
  emailVerified            DateTime?
  image                    String?
  bio                      Json?
  birthday                 DateTime?
  profileVisibility        Visibility[] @default([family, events, lists])
  defaultListVisibility    Visibility   @default(private)
  activityVisibility       Visibility[] @default([family, events, lists])
  password                 String?
  salt                     String?
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?

  // Next Auth Stuff
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  // Families
  families        Family[] @relation("FamilyUser")
  createdFamilies Family[] @relation("FamilyCreator")
  managing        Family[] @relation("FamilyManager")
  invitesSent     Invite[] @relation("inviteSender")

  // Lists
  lists          List[]
  visibleLists   List[] @relation("ListVisibleToUsers")
  purchasedItems Item[] @relation("ItemPurchasedBy")

  // Events
  events        Event[]
  eventInvite   Invite[] @relation("EventInviteUser")
  createdEvents Event[]  @relation("EventCreator")
  managedEvents Event[]  @relation("EventManager")

  // Secret Santa
  receiving    Assignment[] @relation("Recipient")
  giving       Assignment[] @relation("Giver")
  excludedFrom Exclusion[]  @relation("ExclusionFrom")
  excludedTo   Exclusion[]  @relation("ExclusionTo")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum Visibility {
  public
  some
  family
  events
  lists
  private
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique()
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum EventResponse {
  declined
  maybe
  accepted
}

model Invite {
  // Invite Info
  id               String         @id() @default(cuid())
  email            String?
  token            String?        @unique()
  tokenExpiry      DateTime?
  eventResponse    EventResponse?
  needsApproval    Boolean        @default(false)
  approvalRejected Boolean        @default(false)

  // Relationships
  // onDelete: cascade means that if the family is deleted, the invite will be deleted
  family    Family? @relation("FamilyInvite", fields: [familyId], references: [id], onDelete: Cascade)
  familyId  String?
  event     Event?  @relation("EventInvite", fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String?
  user      User?   @relation("EventInviteUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  inviter   User?   @relation("inviteSender", fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum FamilyVisibility {
  private
  link
  public
}

model Family {
  // Family Info
  id              String           @id() @default(cuid())
  name            String
  description     Json?
  visibility      FamilyVisibility @default(private) // TODO: remove
  familyChannel   String?
  allowInvites    Boolean          @default(false)
  requireApproval Boolean          @default(true)

  // Relationships
  managers     User[]  @relation("FamilyManager")
  creatorId    String
  creator      User    @relation("FamilyCreator", fields: [creatorId], references: [id])
  members      User[]  @relation("FamilyUser")
  events       Event[]
  visibleLists List[]  @relation("ListVisibleToFamilies")

  // Invites
  invites          Invite[]  @relation("FamilyInvite")
  inviteLinkToken  String?
  inviteLinkExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum VisiblityType {
  private
  link
  public
  specific
}

model List {
  id                String        @id() @default(cuid())
  name              String
  description       Json?
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  items             Item[]
  visibleToFamilies Family[]      @relation("ListVisibleToFamilies")
  visibleToEvents   Event[]       @relation("ListVisibleToEvents")
  visibleToUsers    User[]        @relation("ListVisibleToUsers")
  shareLink         String?
  visibilityType    VisiblityType @default(private)
  categories        String[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt()
}

enum Priority {
  low
  medium
  high
}

model Item {
  id          String    @id() @default(cuid())
  name        String
  listId      String
  list        List      @relation(fields: [listId], references: [id])
  link        String?
  notes       Json?
  priority    Priority?
  price       Float?
  image       String?
  categories  String[]
  parentId    String?
  parent      Item?     @relation("ChildParentItems", fields: [parentId], references: [id])
  children    Item[]    @relation("ChildParentItems")
  purchasedBy User[]    @relation("ItemPurchasedBy")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
}

model Event {
  // Event Info
  id       String    @id() @default(cuid())
  name     String
  date     DateTime?
  time     DateTime?
  info     Json?
  type     String?
  location String?

  // Relationships
  familyId     String? 
  family       Family?  @relation(fields: [familyId], references: [id])
  creatorId    String
  creator      User     @relation("EventCreator", fields: [creatorId], references: [id])
  attendees    User[]
  managers     User[]   @relation("EventManager")
  invites      Invite[] @relation("EventInvite")
  visibleLists List[]   @relation("ListVisibleToEvents")

  // Secret Santa
  assignments       Assignment[]
  exclusions        Exclusion[]
  secretSantaBudget String?
  notificationsSent Boolean      @default(false)

  // Messages
  eventChannel String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model Assignment {
  id          String   @id() @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  giverId     String
  giver       User     @relation("Giver", fields: [giverId], references: [id])
  recipientId String
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Exclusion {
  id        String   @id() @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  fromId    String
  from      User     @relation("ExclusionFrom", fields: [fromId], references: [id])
  toId      String
  to        User     @relation("ExclusionTo", fields: [toId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
