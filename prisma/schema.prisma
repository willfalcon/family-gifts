datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String          @id() @default(cuid())
  name            String?
  email           String          @unique()
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Authenticator   Authenticator[]
  // familyMemberships FamilyMember[]  @relation("FamilyMembers")
  families        Family[]        @relation("FamilyUser")
  createdFamilies Family[]        @relation("FamilyCreator")
  managing        Family[]        @relation("FamilyManager")
  lists           List[]
  events          Event[]
  receiving       Assignment[]    @relation("Recipient")
  giving          Assignment[]    @relation("Giver")
  eventInvite     Invite[]        @relation("EventInviteUser")
  channels        Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique()
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum EventResponse {
  declined
  maybe
  accepted
}

model Invite {
  id            String         @id() @default(cuid())
  email         String
  token         String         @unique()
  tokenExpiry   DateTime
  family        Family?        @relation("FamilyInvite", fields: [familyId], references: [id])
  familyId      String?
  event         Event?         @relation("EventInvite", fields: [eventId], references: [id])
  eventId       String?
  eventResponse EventResponse?
  user          User?          @relation("EventInviteUser", fields: [userId], references: [id])
  userId        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
}

model Family {
  id            String    @id() @default(cuid())
  name          String
  description   Json?
  managers      User[]    @relation("FamilyManager")
  creatorId     String
  creator       User      @relation("FamilyCreator", fields: [creatorId], references: [id])
  members       User[]    @relation("FamilyUser")
  invites       Invite[]  @relation("FamilyInvite")
  events        Event[]
  listsVisible  List[]
  channels      Channel[] // TODO: remove
  familyChannel String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()
}

// model FamilyMember {
//   id                String       @id() @default(cuid())
//   name              String
//   email             String
//   userId            String?
//   user              User?        @relation("FamilyMembers", fields: [userId], references: [id])
//   inviteToken       String?
//   inviteTokenExpiry DateTime?
//   joined            Boolean      @default(false)
//   giving            Assignment[] @relation("Giver")
//   receiving         Assignment[] @relation("Receiver")
//   items             Item[]       @relation("MemberItems")
//   bought            Item[]       @relation("ItemBoughtBy")
//   eventsManaged     Event[]
//   info              Json?
//   messages          Message[]
//   channels          Channel[]
//   readMessages      Message[]    @relation("ReadyMessages")
//   createdAt         DateTime?    @default(now())
//   updatedAt         DateTime?    @updatedAt()
// }

model List {
  id          String   @id() @default(cuid())
  name        String
  description Json?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  items       Item[]
  visibleTo   Family[]
  default     Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

enum Priority {
  low
  medium
  high
}

model Item {
  id         String    @id() @default(cuid())
  name       String
  listId     String?
  list       List?     @relation(fields: [listId], references: [id])
  link       String?
  notes      Json?
  priority   Priority?
  price      Float?
  image      String?
  categories String[]
  parentId   String?
  parent     Item?     @relation("ChildParentItems", fields: [parentId], references: [id])
  children   Item[]    @relation("ChildParentItems")
  // boughtBy   FamilyMember[] @relation("ItemBoughtBy")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
}

model Event {
  id                String       @id() @default(cuid())
  name              String
  date              DateTime?
  time              DateTime?
  info              Json?
  type              String?
  location          String?
  familyId          String? // TODO: remove family relation
  family            Family?      @relation(fields: [familyId], references: [id])
  assignments       Assignment[]
  secretSantaBudget Float?
  channels          Channel[] // TODO: remove
  eventChannel      String?
  attendees         User[]
  // managers          FamilyMember[]
  invites           Invite[]     @relation("EventInvite")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt()
}

model Assignment {
  id          String   @id() @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  giverId     String?
  giver       User?    @relation("Giver", fields: [giverId], references: [id])
  recipientId String?
  recipient   User?    @relation("Recipient", fields: [recipientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}


// TODO: remove all channel stuff
enum ChannelType {
  family
  event
  individual
}

model Channel {
  id           String      @id() @default(cuid())
  name         String
  lastMessage  String
  type         ChannelType @default(individual)
  familyId     String?
  family       Family?     @relation(fields: [familyId], references: [id])
  eventId      String?
  event        Event?      @relation(fields: [eventId], references: [id])
  groupMembers User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
