//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String          @id() @default(cuid())
  name              String?
  email             String          @unique()
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  Authenticator     Authenticator[]
  role              String          @default("MEMBER")
  managedFamilies   Family[]        @relation("FamilyManager")
  familyMemberships FamilyMember[]  @relation("FamilyMembers")
  lists             List[]
  items             Item[]          @relation("UserItems")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt()
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique()
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Family {
  id              String         @id() @default(cuid())
  name            String
  managerId       String
  manager         User           @relation("FamilyManager", fields: [managerId], references: [id])
  managers        FamilyMember[] @relation("FamilyManagerMember")
  members         FamilyMember[]
  events          Event[]
  listsVisible    List[]
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt()
}

model FamilyMember {
  id          String       @id() @default(cuid())
  name        String
  email       String
  userId      String?
  user        User?        @relation("FamilyMembers", fields: [userId], references: [id])
  familyId    String
  family      Family       @relation(fields: [familyId], references: [id])
  inviteToken String?
  joined      Boolean      @default(false)
  giving      Assignment[] @relation("Giver")
  receiving   Assignment[] @relation("Receiver")
  items       Item[]       @relation("MemberItems")
  bought      Item[]       @relation("ItemBoughtBy")
  managing    Family[]     @relation("FamilyManagerMember")
  info        Json?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt()
}

model List {
  id        String    @id() @default(cuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  items     Item[]
  visibleTo Family[]
  default   Boolean?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt()
}

model Item {
  id        String         @id() @default(cuid())
  name      String
  memberId  String?
  member    FamilyMember?  @relation("MemberItems", fields: [memberId], references: [id])
  userId    String?
  user      User?          @relation("UserItems", fields: [userId], references: [id])
  listId    String?
  list      List?          @relation(fields: [listId], references: [id])
  link      String?
  notes     String?
  image     String?
  category  String?
  parentId  String?
  parent    Item?          @relation("ChildParentItems", fields: [parentId], references: [id])
  children  Item[]         @relation("ChildParentItems")
  boughtBy  FamilyMember[] @relation("ItemBoughtBy")
  createdAt DateTime?      @default(now())
  updatedAt DateTime?      @updatedAt()
}

model Event {
  id          String       @id() @default(cuid())
  name        String
  date        DateTime?
  info        Json?
  type        String?
  location    String?
  familyId    String
  family      Family       @relation(fields: [familyId], references: [id])
  assignments Assignment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
}

model Assignment {
  id         String       @id() @default(cuid())
  eventId    String
  event      Event        @relation(fields: [eventId], references: [id])
  giverId    String
  giver      FamilyMember @relation("Giver", fields: [giverId], references: [id])
  receiverId String
  receiver   FamilyMember @relation("Receiver", fields: [receiverId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
}
